name: Deploy to DEVELOPMENT EKS

on:
  push:
    branches:
      - main

env:
  ECR_REPOSITORY: repo-dev
  EKS_CLUSTER_NAME: eks-cluster-123 
  AWS_REGION: us-west-2

jobs:
  build:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine semantic version
        id: determine-version
        run: |
          # Extract commit message from the latest commit
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          # Check if the commit message contains keywords for patch, minor, or major release
          if echo "$COMMIT_MESSAGE" | grep -q 'BREAKING CHANGE'; then
            echo "::set-output name=version::major"
          elif echo "$COMMIT_MESSAGE" | grep -q 'feat'; then
            echo "::set-output name=version::minor"
          else
            echo "::set-output name=version::patch"
          fi

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$(echo ${{ github.run_number }})-${{ steps.determine-version.outputs.version }}
          echo $ECR_REGISTRY
          echo $IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Application/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      # Continue with the remaining steps as per your workflow
#